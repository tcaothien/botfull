const { Client, GatewayIntentBits, EmbedBuilder } = require("discord.js");
const mongoose = require("mongoose");

// K·∫øt n·ªëi MongoDB
mongoose.connect("MONGODB_CONNECTION_STRING", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

// Schema ng∆∞·ªùi d√πng
const userSchema = new mongoose.Schema({
    userId: String,
    username: String,
    balance: { type: Number, default: 0 },
    isMarried: { type: Boolean, default: false },
    spouseId: { type: String, default: null },
    marriageDate: { type: Date, default: null },
    marriageImages: { type: [String], default: [] },
    lovePoints: { type: Number, default: 0 },
    ring: { type: String, default: null },
});

const User = mongoose.model("User", userSchema);

// Kh·ªüi t·∫°o bot
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });
const prefix = "e";

// H√†m ti·ªán √≠ch
async function findOrCreateUser(userId, username) {
    let user = await User.findOne({ userId });
    if (!user) {
        user = new User({ userId, username });
        await user.save();
    }
    return user;
}

// S·ª± ki·ªán khi bot s·∫µn s√†ng
client.once("ready", () => {
    console.log(`${client.user.tag} ƒë√£ s·∫µn s√†ng!`);
});

// L·ªánh ch√≠nh
client.on("messageCreate", async (message) => {
    if (!message.content.startsWith(prefix) || message.author.bot) return;

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    // C√°c l·ªánh li√™n quan ƒë·∫øn xu
    switch (command) {
        case "exu": {
            const user = await findOrCreateUser(message.author.id, message.author.username);
            const embed = new EmbedBuilder()
                .setColor("Red")
                .setTitle("üí∞ S·ªë d∆∞")
                .setDescription(`B·∫°n hi·ªán c√≥ **${user.balance} xu**.`);
            message.reply({ embeds: [embed] });
            break;
        }
        case "etx": {
            if (args.length < 2) return message.reply("C√∫ ph√°p: `etx <s·ªë_xu> <tai/xiu>`.");
            const betAmount = parseInt(args[0]);
            const choice = args[1].toLowerCase();

            if (isNaN(betAmount) || !["tai", "xiu"].includes(choice)) {
                return message.reply("H√£y nh·∫≠p s·ªë xu v√† l·ª±a ch·ªçn h·ª£p l·ªá (tai/xiu).");
            }

            const gambler = await findOrCreateUser(message.author.id, message.author.username);
            if (gambler.balance < betAmount) return message.reply("B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!");

            // X·ª≠ l√Ω k·∫øt qu·∫£ t√†i x·ªâu üé≤
            const dice1 = Math.floor(Math.random() * 6) + 1;
            const dice2 = Math.floor(Math.random() * 6) + 1;
            const total = dice1 + dice2;
            const result = total <= 10 ? "xiu" : "tai";

            const resultEmbed = new EmbedBuilder()
                .setColor("Red")
                .setTitle("üé≤ T√†i X·ªâu")
                .setDescription(
                    `B·∫°n ƒë√£ ƒë·∫∑t **${betAmount} xu** v√†o **${choice}**.\n` +
                    `üé≤ K·∫øt qu·∫£: ${dice1} + ${dice2} = **${total}** (**${result}**).`
                );

            if (choice === result) {
                gambler.balance += betAmount;
                resultEmbed.addFields({ name: "K·∫øt qu·∫£:", value: `üéâ B·∫°n ƒë√£ **th·∫Øng**! Nh·∫≠n **${betAmount} xu**.` });
            } else {
                gambler.balance -= betAmount;
                resultEmbed.addFields({ name: "K·∫øt qu·∫£:", value: `üò¢ B·∫°n ƒë√£ **thua**! M·∫•t **${betAmount} xu**.` });
            }

            await gambler.save();
            message.reply({ embeds: [resultEmbed] });
            break;
        }
        case "edaily": {
            const user = await findOrCreateUser(message.author.id, message.author.username);
            const dailyAmount = Math.floor(Math.random() * 20000) + 1000; // Random t·ª´ 1,000 ƒë·∫øn 20,000 xu
            user.balance += dailyAmount;
            await user.save();
            message.reply(`B·∫°n nh·∫≠n ƒë∆∞·ª£c **${dailyAmount} xu** t·ª´ qu√† t·∫∑ng h√†ng ng√†y!`);
            break;
        }
        case "egivexu": {
            if (args.length < 2) return message.reply("C√∫ ph√°p: `egivexu @user <s·ªë_xu>`.");
            const mentionedUser = message.mentions.users.first();
            if (!mentionedUser) return message.reply("H√£y tag ng∆∞·ªùi d√πng b·∫°n mu·ªën chuy·ªÉn xu!");
            const betAmount = parseInt(args[1]);

            const giver = await findOrCreateUser(message.author.id, message.author.username);
            const receiver = await findOrCreateUser(mentionedUser.id, mentionedUser.username);

            if (giver.balance < betAmount) return message.reply("B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ chuy·ªÉn!");

            giver.balance -= betAmount;
            receiver.balance += betAmount;

            await giver.save();
            await receiver.save();

            message.reply(`B·∫°n ƒë√£ chuy·ªÉn **${betAmount} xu** cho ${mentionedUser.tag}`);
            break;
        }

        // C√°c l·ªánh k·∫øt h√¥n
        case "emarry": {
            const partner = message.mentions.users.first();
            if (!partner) return message.reply("B·∫°n c·∫ßn tag ng∆∞·ªùi m√† b·∫°n mu·ªën c·∫ßu h√¥n! C√∫ ph√°p: `emarry @user`.");

            if (partner.id === message.author.id) {
                return message.reply("B·∫°n kh√¥ng th·ªÉ t·ª± k·∫øt h√¥n v·ªõi ch√≠nh m√¨nh!");
            }

            // L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng v√† ƒë·ªëi t∆∞·ª£ng
            const user = await findOrCreateUser(message.author.id, message.author.username);
            const partnerData = await findOrCreateUser(partner.id, partner.username);

            // Ki·ªÉm tra xem c·∫£ hai ƒë√£ k·∫øt h√¥n ch∆∞a
            if (user.marriage || partnerData.marriage) {
                return message.reply("M·ªôt trong hai ng∆∞·ªùi ƒë√£ k·∫øt h√¥n! Kh√¥ng th·ªÉ k·∫øt h√¥n th√™m.");
            }

            // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ nh·∫´n trong kho hay kh√¥ng
            if (!user.inventory || user.inventory.length === 0) {
                return message.reply("B·∫°n c·∫ßn mua m·ªôt chi·∫øc nh·∫´n t·ª´ `eshop` tr∆∞·ªõc khi c·∫ßu h√¥n!");
            }

            const embed = new EmbedBuilder()
                .setColor("Pink")
                .setTitle("üíç L·ªùi c·∫ßu h√¥n")
                .setDescription(
                    `${message.author.username} mu·ªën k·∫øt h√¥n v·ªõi ${partner.username} b·∫±ng m·ªôt chi·∫øc nh·∫´n ${user.inventory[0]}.\n\n${partner.username}, h√£y tr·∫£ l·ªùi \`yes\` ƒë·ªÉ ch·∫•p nh·∫≠n ho·∫∑c \`no\` ƒë·ªÉ t·ª´ ch·ªëi.`
                );

            message.reply({ embeds: [embed] });

            const filter = (response) =>
                response.author.id === partner.id &&
                ["yes", "no"].includes(response.content.toLowerCase());

            const collector = message.channel.createMessageCollector({ filter, time: 30000 });

            collector.on("collect", async (response) => {
                if (response.content.toLowerCase() === "yes") {
                    // X√≥a nh·∫´n kh·ªèi kho c·ªßa ng∆∞·ªùi c·∫ßu h√¥n
                    user.inventory.shift();
                    user.marriage = partner.id;
                    partnerData.marriage = message.author.id;

                    // L∆∞u d·ªØ li·ªáu
                    await user.save();
                    await partnerData.save();

                    message.channel.send(
                        `üíñ Ch√∫c m·ª´ng! ${message.author.username} v√† ${partner.username} ƒë√£ ch√≠nh th·ª©c k·∫øt h√¥n! üíç`
                    );
                } else {
                    message.channel.send(`${partner.username} ƒë√£ t·ª´ ch·ªëi l·ªùi c·∫ßu h√¥n. üò¢`);
                }
                collector.stop();
            });

            collector.on("end", (_, reason) => {
                if (reason === "time") {
                    message.reply(`${partner.username} kh√¥ng tr·∫£ l·ªùi. L·ªùi c·∫ßu h√¥n ƒë√£ h·∫øt h·∫°n.`);
                }
            });
            break;
        }
        case "edivorce": {
            const divorcer = await findOrCreateUser(message.author.id, message.author.username);
            if (!divorcer.isMarried) return message.reply("B·∫°n ch∆∞a k·∫øt h√¥n!");

            const divorceConfirm = await message.reply(
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ly h√¥n? G√µ `c√≥` ƒë·ªÉ x√°c nh·∫≠n ho·∫∑c `kh√¥ng` ƒë·ªÉ h·ªßy."
            );

            const filterDivorce = (response) =>
                response.author.id === message.author.id && ["c√≥", "kh√¥ng"].includes(response.content.toLowerCase());

            const collectorDivorce = message.channel.createMessageCollector({
                filter: filterDivorce,
                time: 30000,
            });

            collectorDivorce.on("collect", async (response) => {
                if (response.content.toLowerCase() === "c√≥") {
                    const spouse = await User.findOne({ userId: divorcer.spouseId });

                    divorcer.isMarried = false;
                    divorcer.spouseId = null;
                    divorcer.marriageDate = null;
                    divorcer.marriageImages = [];
                    divorcer.ring = null;

                    spouse.isMarried = false;
                    spouse.spouseId = null;
                    spouse.marriageDate = null;
                    spouse.marriageImages = [];
                    spouse.ring = null;

                    await divorcer.save();
                    await spouse.save();

                    message.channel.send("üíî B·∫°n ƒë√£ ly h√¥n th√†nh c√¥ng.");
                } else {
                    message.reply("B·∫°n ƒë√£ h·ªßy y√™u c·∫ßu ly h√¥n.");
                }
                collectorDivorce.stop();
            });

            collectorDivorce.on("end", (_, reason) => {
                if (reason === "time") {
                    message.channel.send("‚è∞ H·∫øt th·ªùi gian x√°c nh·∫≠n. Y√™u c·∫ßu ly h√¥n ƒë√£ b·ªã h·ªßy.");
                }
            });
            break;
        }
        case "epmarry": {
            const user = await findOrCreateUser(message.author.id, message.author.username);

            // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ k·∫øt h√¥n hay ch∆∞a
            if (!user.marriage) {
                return message.reply("B·∫°n ch∆∞a k·∫øt h√¥n v·ªõi ai c·∫£!");
            }

            // L·∫•y th√¥ng tin ƒë·ªëi t√°c
            const partner = await findOrCreateUser(user.marriage);
            if (!partner) {
                return message.reply("ƒê·ªëi t√°c c·ªßa b·∫°n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.");
            }

            // L·∫•y th√¥ng tin h√¥n nh√¢n
            const marriageDate = user.marriageDate || "Kh√¥ng r√µ ng√†y";
            const lovePoints = user.lovePoints || 0;
            const weddingRing = user.weddingRing || "Kh√¥ng c√≥ nh·∫´n";
            const weddingImage = user.weddingImage || "Ch∆∞a th√™m ·∫£nh marry";

            // Embed hi·ªÉn th·ªã th√¥ng tin h√¥n nh√¢n
            const embed = new EmbedBuilder()
                .setColor("Pink")
                .setTitle("üíç Th√¥ng tin h√¥n nh√¢n")
                .addFields(
                    { name: "üë´ B·∫°n ƒëang h·∫°nh ph√∫c v·ªõi", value: `${partner.username}`, inline: true },
                    { name: "üìÖ Ng√†y k·∫øt h√¥n", value: marriageDate, inline: true },
                    { name: "üíé Nh·∫´n k·∫øt h√¥n", value: weddingRing, inline: true },
                    { name: "‚ù§Ô∏è ƒêi·ªÉm y√™u th∆∞∆°ng", value: `${lovePoints}`, inline: true },
                    { name: "üñºÔ∏è ·∫¢nh marry", value: weddingImage, inline: false }
                )
                .setFooter({ text: "H√£y y√™u th∆∞∆°ng v√† gi·ªØ g√¨n h·∫°nh ph√∫c c·ªßa m√¨nh nh√©!" });

            message.reply({ embeds: [embed] });
            break;
        }
        case "edelimage": {
            const user = await findOrCreateUser(message.author.id, message.author.username);
            if (!user.isMarried) return message.reply("B·∫°n ch∆∞a k·∫øt h√¥n!");

            const image = args.join(" ");
            if (!image || !user.marriageImages.includes(image)) {
                return message.reply("·∫¢nh n√†y kh√¥ng t·ªìn t·∫°i trong b·ªô s∆∞u t·∫≠p c·ªßa b·∫°n.");
            }
            user.marriageImages = user.marriageImages.filter((img) => img !== image);
            await user.save();
            message.reply(`·∫¢nh k·∫øt h√¥n ƒë√£ ƒë∆∞·ª£c x√≥a: ${image}`);
            break;
        }
       case "eshop": {
            const rings = [
                { id: "01", name: "ENZ Peridot", price: 100000 },
                { id: "02", name: "ENZ Citrin", price: 200000 },
                { id: "03", name: "ENZ Topaz", price: 500000 },
                { id: "04", name: "ENZ Spinel", price: 1000000 },
                { id: "05", name: "ENZ Aquamarine", price: 2500000 },
                { id: "06", name: "ENZ Emerald", price: 5000000 },
                { id: "07", name: "ENZ Ruby", price: 10000000 },
                { id: "999", name: "ENZ Sapphire", price: 25000000 },
            ];

            const shopEmbed = new EmbedBuilder()
                .setColor("Red")
                .setTitle("üíç C·ª≠a h√†ng nh·∫´n k·∫øt h√¥n")
                .setDescription(
                    rings
                        .map(
                            (ring) =>
                                `**${ring.id}**: ${ring.name} - ${ring.price.toLocaleString()} xu`
                        )
                        .join("\n")
                )
                .setFooter({ text: "S·ª≠ d·ª•ng l·ªánh ebuy <m√£ nh·∫´n> ƒë·ªÉ mua!" });

            return message.reply({ embeds: [shopEmbed] });
        }

        case "ebuy": {
            const rings = [
                { id: "01", name: "ENZ Peridot", price: 100000 },
                { id: "02", name: "ENZ Citrin", price: 200000 },
                { id: "03", name: "ENZ Topaz", price: 500000 },
                { id: "04", name: "ENZ Spinel", price: 1000000 },
                { id: "05", name: "ENZ Aquamarine", price: 2500000 },
                { id: "06", name: "ENZ Emerald", price: 5000000 },
                { id: "07", name: "ENZ Ruby", price: 10000000 },
                { id: "999", name: "ENZ Sapphire", price: 25000000 },
            ];

            const ringId = args[0];
            if (!ringId) return message.reply("C√∫ ph√°p: `ebuy <m√£ nh·∫´n>`.");

            const ring = rings.find((r) => r.id === ringId);
            if (!ring) return message.reply("M√£ nh·∫´n kh√¥ng h·ª£p l·ªá!");

            const buyer = await findOrCreateUser(message.author.id, message.author.username);
            if (buyer.balance < ring.price) {
                return message.reply("B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ mua nh·∫´n n√†y!");
            }

            buyer.balance -= ring.price;

            if (!buyer.inventory) buyer.inventory = [];
            buyer.inventory.push(ring.name);

            await buyer.save();

            message.reply(`üíç B·∫°n ƒë√£ mua nh·∫´n **${ring.name}** th√†nh c√¥ng!`);
            break;
        }

        case "einv": {
            const user = await findOrCreateUser(message.author.id, message.author.username);

            if (!user.inventory || user.inventory.length === 0) {
                return message.reply("üì¶ Kho l∆∞u tr·ªØ c·ªßa b·∫°n tr·ªëng. H√£y mua nh·∫´n t·∫°i `eshop`!");
            }

            const inventoryEmbed = new EmbedBuilder()
                .setColor("Pink")
                .setTitle("üì¶ Kho l∆∞u tr·ªØ nh·∫´n c·ªßa b·∫°n")
                .setDescription(
                    user.inventory.map((ring, index) => `${index + 1}. ${ring}`).join("\n")
                )
                .setFooter({ text: `B·∫°n c√≥ ${user.inventory.length} nh·∫´n trong kho.` });

            message.reply({ embeds: [inventoryEmbed] });
            break;
        } 
        case "egift": {
            const recipient = message.mentions.users.first();
            const ringName = args.slice(1).join(" ");

            if (!recipient) {
                return message.reply("B·∫°n c·∫ßn tag ng∆∞·ªùi nh·∫≠n! C√∫ ph√°p: `egift @user <t√™n_nh·∫´n>`.");
            }

            if (recipient.id === message.author.id) {
                return message.reply("B·∫°n kh√¥ng th·ªÉ t·∫∑ng nh·∫´n cho ch√≠nh m√¨nh!");
            }

            if (!ringName) {
                return message.reply("H√£y nh·∫≠p t√™n nh·∫´n m√† b·∫°n mu·ªën t·∫∑ng! C√∫ ph√°p: `egift @user <t√™n_nh·∫´n>`.");
            }

            // L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng v√† ƒë·ªëi t∆∞·ª£ng
            const sender = await findOrCreateUser(message.author.id, message.author.username);
            const receiver = await findOrCreateUser(recipient.id, recipient.username);

            if (!sender.inventory || sender.inventory.length === 0) {
                return message.reply("B·∫°n kh√¥ng c√≥ nh·∫´n n√†o trong kho ƒë·ªÉ t·∫∑ng! H√£y mua nh·∫´n t·∫°i `eshop`.");
            }

            // Ki·ªÉm tra nh·∫´n c√≥ trong kho hay kh√¥ng
            const ringIndex = sender.inventory.findIndex((item) => item.toLowerCase() === ringName.toLowerCase());
            if (ringIndex === -1) {
                return message.reply("B·∫°n kh√¥ng c√≥ nh·∫´n n√†y trong kho ƒë·ªÉ t·∫∑ng.");
            }

            // Chuy·ªÉn nh·∫´n t·ª´ ng∆∞·ªùi g·ª≠i sang ng∆∞·ªùi nh·∫≠n
            const ring = sender.inventory[ringIndex];
            sender.inventory.splice(ringIndex, 1); // X√≥a nh·∫´n kh·ªèi kho c·ªßa ng∆∞·ªùi g·ª≠i
            if (!receiver.inventory) receiver.inventory = [];
            receiver.inventory.push(ring); // Th√™m nh·∫´n v√†o kho c·ªßa ng∆∞·ªùi nh·∫≠n

            // L∆∞u thay ƒë·ªïi
            await sender.save();
            await receiver.save();

            const giftEmbed = new EmbedBuilder()
                .setColor("Pink")
                .setTitle("üéÅ Qu√† t·∫∑ng nh·∫´n")
                .setDescription(
                    `${message.author.username} ƒë√£ t·∫∑ng nh·∫´n **${ring}** cho ${recipient.username}.`
                );

            message.reply({ embeds: [giftEmbed] });
            break;
        }
        case "eaddreply": {
            if (message.author.id !== "1262464227348582492") return message.reply("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y!");

            const keyword = args[0];
            const reply = args.slice(1).join(" ");
            if (!keyword || !reply) return message.reply("C√∫ ph√°p: `eaddreply <t·ª´_kh√≥a> <n·ªôi_dung_tr·∫£_l·ªùi>`.");

            // L∆∞u tr·ªØ tr·∫£ l·ªùi t·ª± ƒë·ªông
            // Your code to add automatic replies to the database or memory

            message.reply(`ƒê√£ th√™m tr·∫£ l·ªùi t·ª± ƒë·ªông cho t·ª´ kh√≥a: **${keyword}**.`);
            break;
        }
        case "edelreply": {
            if (message.author.id !== "1262464227348582492") return message.reply("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y!");

            const keyword = args[0];
            if (!keyword) return message.reply("C√∫ ph√°p: `edelreply <t·ª´_kh√≥a>`.");

            // Your code to delete automatic replies from the database or memory

            message.reply(`ƒê√£ x√≥a tr·∫£ l·ªùi t·ª± ƒë·ªông cho t·ª´ kh√≥a: **${keyword}**.`);
            break;
        }
        case "elistreply": {
            if (message.author.id !== "1262464227348582492") return message.reply("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y!");

            // Your code to list all automatic replies

            message.reply("Danh s√°ch tr·∫£ l·ªùi t·ª± ƒë·ªông:");
            break;
        }
        case "eaddxu": {
            if (message.author.id !== "1262464227348582492") return message.reply("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y!");

            const mentionedUser = message.mentions.users.first();
            const amount = parseInt(args[1]);
            if (!mentionedUser || isNaN(amount)) return message.reply("C√∫ ph√°p: `eaddxu @user <s·ªë_xu>`.");

            const user = await findOrCreateUser(mentionedUser.id, mentionedUser.username);
            user.balance += amount;
            await user.save();

            message.reply(`ƒê√£ th√™m **${amount} xu** cho ${mentionedUser.tag}.`);
            break;
        }
        case "edelxu": {
            if (message.author.id !== "1262464227348582492") return message.reply("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y!");

            const mentionedUser = message.mentions.users.first();
            const amount = parseInt(args[1]);
            if (!mentionedUser || isNaN(amount)) return message.reply("C√∫ ph√°p: `edelxu @user <s·ªë_xu>`.");

            const user = await findOrCreateUser(mentionedUser.id, mentionedUser.username);
            if (user.balance < amount) return message.reply("Ng∆∞·ªùi n√†y kh√¥ng ƒë·ªß xu!");

            user.balance -= amount;
            await user.save();

            message.reply(`ƒê√£ tr·ª´ **${amount} xu** t·ª´ ${mentionedUser.tag}.`);
            break;
        }
        case "eresetallbot": {
            if (message.author.id !== "1262464227348582492") return message.reply("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y!");

            await User.deleteMany({});
            message.reply("ƒê√£ reset t·∫•t c·∫£ d·ªØ li·ªáu c·ªßa bot.");
            break;
        }
        case "etop": {
            // Your code to show leaderboard
            break;
        }
        case "ehelps": {
            const helpEmbed = new EmbedBuilder()
                .setColor("Red")
                .setTitle("üìö Danh s√°ch l·ªánh bot")
                .setDescription(`
                **exu** - Ki·ªÉm tra s·ªë d∆∞ xu c·ªßa b·∫°n.
                **etx <s·ªë_xu> <tai/xiu>** - Ch∆°i t√†i x·ªâu.
                **edaily** - Nh·∫≠n xu h√†ng ng√†y.
                **egivexu @user <s·ªë_xu>** - Chuy·ªÉn xu cho ng∆∞·ªùi kh√°c.
                **emarry @user** - C·∫ßu h√¥n ng∆∞·ªùi ƒë∆∞·ª£c tag.
                **edivorce** - Ly h√¥n v·ª£/ch·ªìng hi·ªán t·∫°i.
                **epmarry** - Xem th√¥ng tin k·∫øt h√¥n.
                **eaddimage <URL ·∫£nh>** - Th√™m ·∫£nh v√†o b·ªô s∆∞u t·∫≠p k·∫øt h√¥n.
                **edelimage <URL ·∫£nh>** - X√≥a ·∫£nh kh·ªèi b·ªô s∆∞u t·∫≠p k·∫øt h√¥n.
                **eshop** - Hi·ªÉn th·ªã c√°c lo·∫°i nh·∫´n c√≥ th·ªÉ mua
                **ebuy <m√£ nh·∫´n>** - Mua nh·∫´n ƒë·ªÉ c·∫ßu h√¥n.
                **einv** - Ki·ªÉm tra kho nh·∫´n c·ªßa b·∫°n
                **egift @user <t√™n_nh·∫´n>** - T·∫∑ng nh·∫´n cho ng∆∞·ªùi kh√°c.
                **eaddreply <t·ª´_kh√≥a> <n·ªôi_dung_tr·∫£_l·ªùi>** - Th√™m tr·∫£ l·ªùi t·ª± ƒë·ªông cho t·ª´ kh√≥a.
                **edelreply <t·ª´_kh√≥a>** - X√≥a tr·∫£ l·ªùi t·ª± ƒë·ªông cho t·ª´ kh√≥a.
                **elistreply** - Li·ªát k√™ c√°c t·ª´ kh√≥a v√† tr·∫£ l·ªùi t·ª± ƒë·ªông.
                **eaddxu @user <s·ªë_xu>** - Th√™m xu cho ng∆∞·ªùi d√πng.
                **edelxu @user <s·ªë_xu>** - Tr·ª´ xu t·ª´ ng∆∞·ªùi d√πng.
                **eresetallbot** - Reset t·∫•t c·∫£ d·ªØ li·ªáu c·ªßa bot.
                **etop** - Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi ch∆°i.
                **ehelps** - Hi·ªÉn th·ªã danh s√°ch l·ªánh c·ªßa bot.
                `);
            message.reply({ embeds: [helpEmbed] });
            break;
        }
    }
});

// ƒêƒÉng nh·∫≠p v√†o Discord
client.login("YOUR_BOT_TOKEN");
